unit unitTest;


interface

uses
  System.SysUtils, System.Types, System.Classes;


function FreeFunc1(const Param: integer): integer;


type
// -----------------------------------------------------------------------------
// TStdClass
// -----------------------------------------------------------------------------

  TStdClass = class(TObject)
  private type
    TStdInternalClass = class(TObject)
    private
      FName: string;
      FId:   integer;

    public
      constructor Create;
      destructor  Destroy; override;

      procedure   CopyTo(Dest: TStdInternalClass);

      property    Name: string  read FName write FName;
      property    Id:   integer read FId   write FId;
    end;

  private
    FId:    integer;
    FValue: string;

    class var FInstCnt: integer;

    class function Init(Cnt: integer): boolean;
    class function DeInit(Cnt: integer): boolean;
    class function ToType<X: class, constructor>(const Value: string): X;

    procedure      SetValue(const Value: string);

  public
    constructor    Create;
    destructor     Destroy; override;

    function       Convert<X: class, constructor>(const Value: string): X;

    class property InstCnt:   integer read FInstCnt;

    property       PropId:    integer read FId    write FId;
    property       PropValue: string  read FValue write SetValue;

  end;


// -----------------------------------------------------------------------------
// TGenericClass<T>
// -----------------------------------------------------------------------------

  TGenericClass<T> = class(TObject)
  private type
    TGenericInternalClass<I, K> = class(TObject)
    strict private
      FName:  string;
      FId:    I;
      FValue: K;

    public
      constructor Create;
      destructor  Destroy; override;

      procedure   CopyTo<J>(Dest: TGenericInternalClass<I, K>);

      property    Name:  string read FName  write FName;
      property    Id:    I      read FId    write FId;
      property    Value: K      read FValue write FValue;
    end;

  strict private
    FId:    integer;
    FValue: T;

    class var FInstCnt: integer;

    class function Init<I>(Cnt: integer): boolean;
    class function DeInit(Cnt: integer): boolean;

    procedure      SetValue(const Value: T);

  public
    constructor    Create;
    destructor     Destroy; override;

    class property InstCnt:   integer read FInstCnt;

    property       PropId:    integer read FId    write FId;
    property       PropValue: T       read FValue write SetValue;

  end;



type
// -----------------------------------------------------------------------------
// TEnum
// -----------------------------------------------------------------------------
  TEnum = (enMember1, enMember2, enMember3);

  TEnumHelper = record helper for TEnum
  public
    function       ToString: string;
    class function FromString(const AString: string): TEnum; static;
  end;


// -----------------------------------------------------------------------------
// TStdClassHelper
// -----------------------------------------------------------------------------
  TStdClassHelper = class helper for TStdClass
  public
    function       AsString: string;
    class function FromString(const AString: string): TStdClass; static;
  end;



// -----------------------------------------------------------------------------
// Free routines
// -----------------------------------------------------------------------------

procedure FreeProc1(AParam: integer);

function  FreeFunc2(const AParam: string): integer;
procedure FreeProc2(AParam: integer);

{function  UnusedFreeFunc1(ANum: double): cardinal;}

procedure FreeProc3(AParam: integer);

(*
function  UnusedFreeFunc2(ANum: double): cardinal;
function  UnusedFreeFunc3(ANum: double): cardinal;
*)



implementation

{R *.dfm}


// -----------------------------------------------------------------------------
// Free routines
// -----------------------------------------------------------------------------

function FreeFunc3(const Param: integer): integer; forward;



{ Free function 1 }

function FreeFunc1(const Param: integer): integer;
begin
  //

  Result := 0;
end;



{ Free procedure 1 }

procedure FreeProc1(AParam: integer);
begin
  // Do something
end;



{ Free function 2 }

function FreeFunc2(const AParam: string): integer;
begin
  // Do something

  Result := 0;
end;




{
// Unused free function 1

function UnusedFreeFunc1(ANum: double): cardinal;
begin
  // Do something

  Result := 0;
end;
}



{ Free procedure 2 }
procedure FreeProc2(AParam: integer);
begin
  // Do something
end;



(*
// Unused free function 2

function UnusedFreeFunc2(ANum: double): cardinal;
begin
  // Do something

  Result := 0;
end;



{ Unused free function 3 }

function UnusedFreeFunc3(ANum: double): cardinal;
begin
  // Do something

  Result := 0;
end;
*)



{ Free procedure 3 }

procedure FreeProc3(AParam: integer);
begin
  //
end;



procedure FreeProc4(const Param: integer); forward;



// -----------------------------------------------------------------------------
// TStdClass
// -----------------------------------------------------------------------------

constructor TStdClass.Create;
begin
  inherited;

  Init(Succ(InstCnt));
end;


destructor TStdClass.Destroy;
begin
  DeInit(Pred(InstCnt));

  inherited;
end;


class function TStdClass.Init(Cnt: integer): boolean;
begin
  FInstCnt := Cnt;
  Result   := true;
end;


class function TStdClass.DeInit(Cnt: integer): boolean;
begin
  FInstCnt := Cnt;
  Result   := true;
end;


class function TStdClass.ToType<X>(const Value: string): X;
begin
  Result := X.Create;
end;


procedure TStdClass.SetValue(const Value: string);
begin
  FValue := Value;
end;


function TStdClass.Convert<X>(const Value: string): X;
begin
  Result := ToType<X>(Value);
end;




// -----------------------------------------------------------------------------
// TStdClass.TStdInternalClass
// -----------------------------------------------------------------------------

constructor TStdClass.TStdInternalClass.Create;
begin
  inherited;

  //
end;


destructor TStdClass.TStdInternalClass.Destroy;
begin
  //

  inherited;
end;


procedure TStdClass.TStdInternalClass.CopyTo(Dest: TStdInternalClass);
begin
  Dest.Name := Name;
  Dest.Id   := Id;
end;



// -----------------------------------------------------------------------------
// Free routines
// -----------------------------------------------------------------------------

{ Free function 3 with internal procedure }

function FreeFunc3(const Param: integer): integer;

  procedure InternalProc1(const Param: integer);
  begin
    //
  end;

begin
  //

  Result := 0;
end;



{ Free procedure 4 with internal function }

procedure FreeProc4(const Param: integer);

  function InternalFunc1(const Param: integer): string;
  begin
    //

    Result := '';
  end;

begin
  //
end;



{ Free procedure 5 with internal procedure preceeded by a comment }

procedure FreeProc5;

  // Internal routine
  procedure InternalProc2;
  begin
    //
  end;

begin
  //
end;



// -----------------------------------------------------------------------------
// TGenericClass<T>
// -----------------------------------------------------------------------------

constructor TGenericClass<T>.Create;
begin
  inherited;

  Init<string>(Succ(InstCnt));
end;


destructor TGenericClass<T>.Destroy;
begin
  DeInit(Pred(InstCnt));

  inherited;
end;


// This is a class function
class function TGenericClass<T>.Init<I>(Cnt: integer): boolean;
begin
  FInstCnt := Cnt;
  Result   := true;
end;


// This is a class function
class function TGenericClass<T>.DeInit(Cnt: integer): boolean;
begin
  FInstCnt := Cnt;
  Result   := true;
end;


procedure TGenericClass<T>.SetValue(const Value: T);
begin
  FValue := Value;
end;



// -----------------------------------------------------------------------------
// TGenericClass<T>.TGenericInternalClass<I, K>
// -----------------------------------------------------------------------------

constructor TGenericClass<T>.TGenericInternalClass<I, K>.Create;
begin
  inherited;

  FName  := '';
  FId    := Default(I);
  FValue := Default(K);
end;


destructor TGenericClass<T>.TGenericInternalClass<I, K>.Destroy;
begin
  //

  inherited;
end;


procedure TGenericClass<T>.TGenericInternalClass<I, K>.CopyTo<J>(Dest: TGenericInternalClass<I, K>);
begin
  Dest.Name  := Name;
  Dest.Id    := Id;
  Dest.Value := Value;
end;



// -----------------------------------------------------------------------------
// TEnumHelper
// -----------------------------------------------------------------------------

function TEnumHelper.ToString: string;
begin
  case Self of
    enMember2: Result := 'Member 2';
    enMember3: Result := 'Member 3';
    else       Result := 'Unknown';
  end;
end;


class function TEnumHelper.FromString(const AString: string): TEnum;
begin
  if SameText(AString, 'Member 2') then
    Result := enMember2

  else if SameText(AString, 'Member 3') then
    Result := enMember3

  else
    Result := enMember1;
end;



// -----------------------------------------------------------------------------
// TStdClassHelper
// -----------------------------------------------------------------------------

function TStdClassHelper.AsString: string;
begin
  Result := 'TStdClass instance';
end;


class function TStdClassHelper.FromString(const AString: string): TStdClass;
begin
  Result := TStdClass.Create.Convert<TStdClass>(AString);
end;


end.
